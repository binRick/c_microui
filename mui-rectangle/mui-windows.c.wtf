#pragma once
#include <SDL2/SDL_ttf.h>
#include "mui-windows/mui-windows.h"
#include "mui-render/mui-render.h"
#include "mui-render/mui-render-options.h"
#include "window-utils/window-utils.h"
#include "mui-windows.h"
#define CFG_TITLE "my app"
#define CFG_X_OFFSET 50
#define CFG_Y_OFFSET 50
#define CFG_WIDTH 800
#define CFG_HEIGHT 650
#define CFG_OPTIONS (SDL_WINDOW_UTILITY|SDL_WINDOW_BORDERLESS|SDL_WINDOW_ALWAYS_ON_TOP|SDL_WINDOW_OPENGL)

#define _CFG_OPTIONS SDL_WINDOW_OPENGL | SDL_WINDOW_BORDERLESS | SDL_WINDOW_RESIZABLE | SDL_WINDOW_ALLOW_HIGHDPI | SDL_WINDOW_ALWAYS_ON_TOP | SDL_WINDOW_SKIP_TASKBAR | SDL_WINDOW_POPUP_MENU | SDL_WINDOW_UTILITY |  SDL_WINDOW_SHOWN
//  |SDL_WINDOW_SHOWN
//  |SDL_WINDOW_SKIP_TASKBAR\
//  |SDL_WINDOW_POPUP_MENU
#define LOG_HEIGHT 200
#define CURRENT_STATE_HEIGHT 200
#define WINDOW_INFO_HEIGHT 200
#define WINDOW_INFO_OPTIONS MU_OPT_NODRAG|MU_OPT_NOCLOSE
#define CURRENT_STATE_OPTIONS MU_OPT_NODRAG|MU_OPT_NOCLOSE
#define LOG_OPTIONS MU_OPT_NODRAG|MU_OPT_NOCLOSE
static struct mui_init_cfg_t CFG = {
    .title = CFG_TITLE,
    .options = CFG_OPTIONS,
    .x_offset = CFG_X_OFFSET, .y_offset = CFG_Y_OFFSET,
    .width = WINDOW_WIDTH, .height = CURRENT_STATE_HEIGHT+CURRENT_STATE_HEIGHT+LOG_HEIGHT,
    .verbose_mode = false,
    .debug_mode = false,
};

#define RETAIN_INITIAL_FOCUS    true
#define MAX_COLORS              1000
#define DEBUG_COLORS            false
//////////////////////////////////////////////////////////////////////////
typedef struct {
  int red, green, blue;
} color_rgb_t;
//////////////////////////////////////////////////////////////////////////
color_rgb_t get_color_name_rgb(const char *COLOR_NAME);
int pid_pre();
int pid_post(int);
int load_windows_hash(ColorsDB *DB);
void iterate_windows_hash();
void iterate_color_name_strings();
void iterate_color_hex_strings();
int load_color_names();
char * get_color_hex_name(const char *COLOR_HEX);
char * get_color_name_hex(const char *COLOR_NAME);
static char * get_color_name_row(const char *COLOR_NAME);
static void update_cur_color(const char *COLOR_NAME);
static color_rgb_t get_color_name_rgb_background(const char *COLOR_NAME);
static void *get_color_name_row_property(const char *COLOR_NAME, const char *ROW_PROPERTY);
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
static char            CUR_COLOR_HEX[32], CUR_COLOR_ROW[2048], CUR_COLOR_NAME[32] = "";
static color_rgb_t     CUR_COLOR_RGB    = { 0, 0, 0 };
static color_rgb_t     CUR_COLOR_RGB_BG = { 0, 0, 0 };
static char            logbuf[64000];
static int             logbuf_updated  = 0;
static float           bg[3]           = { WINDOW_BACKGROUND_RED, WINDOW_BACKGROUND_GREEN, WINDOW_BACKGROUND_BLUE };
static float           bg_text[3]      = { WINDOW_BACKGROUND_RED, WINDOW_BACKGROUND_GREEN, WINDOW_BACKGROUND_BLUE };
static float           OUTER_BG[3]     = { 0, 0, 0 };
volatile int           set_focus_qty   = 0;
static size_t          windows_per_row = 3;
//////////////////////////////////////////////////////////////////////////
ColorsDB               *DB;
struct djbhash         COLORS_HASH = { 0 }, COLOR_NAME_HASH = { 0 }, COLOR_HEX_HASH = { 0 };
struct StringFNStrings COLOR_NAME_STRINGS, COLOR_HEX_STRINGS;
//////////////////////////////////////////////////////////////////////////

char          windows_qty_title[32];
struct Vector *windows;
const size_t  RELOAD_WINDOWS_LIST_INTERVAL_MS = 2000;
size_t        last_windows_list_reloaded_ts   = 0;
SDL_mutex     *windows_mutex;
SDL_Thread    *poll_windows_thread;
bool          poll_windows_thread_active = false;
window_t      *cur_selected_window       = NULL;
SDL_Texture   *texture;


static void write_log(const char *text) {
  if (logbuf[0]) {
    strcat(logbuf, "\n");
  }
  strcat(logbuf, text);
  logbuf_updated = 1;
}

int* r_get_text_size(char *text) {
  if(text == NULL)
    text = "";
  static int text_size[2];
  int width, height;
  TTF_SizeText(font, text, &width, &height);
  text_size[0] = width;
  text_size[1] = height;
  SDL_Log("text size: %dx%d: %s",text_size[0],text_size[1],text);
  return text_size;
}


int text_width(mu_Font font, char* text) {
  if(text == NULL)
    text = "";
  int text_size[2] = {r_get_text_size(text)[0], r_get_text_size(text)[1]};
  return text_size[0];

}

int r_get_text_height(void) {
  return(12);
}

int text_height(mu_Font font, char* text) {
  if(text == NULL)
    text = "";
  int text_size[2] = {r_get_text_size(text)[0], r_get_text_size(text)[1]};
  return text_size[1];
}

static void test_window(mu_Context *ctx) {
  if (mu_begin_window_ex(ctx, "Window Info", mu_rect(0, CURRENT_STATE_HEIGHT, WINDOW_WIDTH, WINDOW_INFO_HEIGHT),WINDOW_INFO_OPTIONS)){
    mu_Container *win = mu_get_current_container(ctx);
    win->rect.w = mu_max(win->rect.w, WINDOW_WIDTH);
    win->rect.h = mu_max(win->rect.h, CURRENT_STATE_HEIGHT);

    if (mu_header_ex(ctx, CUR_COLOR_NAME, MU_OPT_EXPANDED)) {
      mu_Container *win = mu_get_current_container(ctx);
      char         buf[64];
      mu_layout_row(ctx, 4, (int[]) { 110, 160, 110, -1 }, 0);
      SDL_LockMutex(windows_mutex);

      if (cur_selected_window != NULL) {
        mu_label(ctx, "App Name:");
        sprintf(buf, "%s", cur_selected_window->app_name); mu_label(ctx, buf);
        mu_label(ctx, "Window ID:"); sprintf(buf, "%d", cur_selected_window->window_id); mu_label(ctx, buf);
        mu_label(ctx, "Position:"); sprintf(buf, "%dx%d", (int)cur_selected_window->position.x, (int)cur_selected_window->position.y); mu_label(ctx, buf);
        mu_label(ctx, "PID:"); sprintf(buf, "%d", cur_selected_window->pid); mu_label(ctx, buf);
      }
      SDL_UnlockMutex(windows_mutex);
    }

    /* tree */


    mu_end_window(ctx);
  }
} /* test_window */


static int poll_windows_thread_function(void *ARGS){
  SDL_LockMutex(windows_mutex);
  bool active = poll_windows_thread_active;
  SDL_UnlockMutex(windows_mutex);
  while (active) {
    size_t        qty = 0;
    window_t      *w;
    unsigned long dur = 0;
    SDL_LockMutex(windows_mutex);
    {
      unsigned long ts = timestamp();
      active = poll_windows_thread_active;
      if (active == false) {
        break;
      }
      windows                       = get_windows();
      last_windows_list_reloaded_ts = timestamp();
      qty                           = vector_size(windows);
      unsigned long dur = timestamp() - ts;
    }
    SDL_UnlockMutex(windows_mutex);
    if(CFG.debug_mode == true)
      SDL_Log(">Reloaded %lu Windows in %lums. Sleeping for %lu",
          qty,dur,RELOAD_WINDOWS_LIST_INTERVAL_MS
          );
    for (size_t i = 0; i < qty; i++) {
      SDL_LockMutex(windows_mutex);
      {
        w = (window_t *)vector_get(windows, i);
      }
      SDL_UnlockMutex(windows_mutex);
    }
    SDL_Delay(RELOAD_WINDOWS_LIST_INTERVAL_MS);
  }
  SDL_Log(">poll_windows_thread_function exited");
  return(0);
} /* poll_windows_thread_function */


static void windows_window(mu_Context *ctx) {
  if (mu_begin_window_ex(ctx, "Current State", mu_rect(0, 0, WINDOW_WIDTH, CURRENT_STATE_HEIGHT),CURRENT_STATE_OPTIONS)) {
    mu_Container *win = mu_get_current_container(ctx);
    win->rect.w = mu_max(win->rect.w, WINDOW_WIDTH);
    win->rect.h = mu_max(win->rect.h, CURRENT_STATE_HEIGHT);
    size_t   best_qty = 3000, recent_qty = 25, all_qty = 10000;
    window_t *w;
    size_t   qty = 0;
    SDL_LockMutex(windows_mutex);
    {
      qty = vector_size(windows);
    }
    SDL_UnlockMutex(windows_mutex);
    if (mu_header_ex(ctx, windows_qty_title, MU_OPT_EXPANDED|MU_OPT_NODRAG)) {
      for (size_t i = 0; i < qty; i++) {
        SDL_LockMutex(windows_mutex);
        {
          w = (window_t *)vector_get(windows, i);
        }
        SDL_UnlockMutex(windows_mutex);
        if ((i % windows_per_row) == 0) {
          mu_layout_row(ctx, windows_per_row, (int[]) {
            WINDOW_WIDTH / windows_per_row - windows_per_row - 3,
            WINDOW_WIDTH / windows_per_row - windows_per_row - 3,
            WINDOW_WIDTH / windows_per_row - windows_per_row - 3,
          }, 0);
        }
        char *button_name;
        asprintf(&button_name, "%s-%d", w->app_name, w->window_id);
        if (mu_button(ctx, button_name)) {
          SDL_Log("clicked app name: %s", w->app_name);
          SDL_LockMutex(windows_mutex);
          {
            cur_selected_window = w;
          }
          SDL_Log("cur window id: %d", cur_selected_window->window_id);
          SDL_UnlockMutex(windows_mutex);
        }
        free(button_name);
      }
    }
    mu_end_window(ctx);
  }
} /* windows_window */


static color_rgb_t get_color_name_rgb_background(const char *COLOR_NAME){
  color_rgb_t bg_color = {
    255,
    255,
    255,
  };
  color_rgb_t rgb = get_color_name_rgb(COLOR_NAME);

  if (rgb.green > 160) {
    bg_color.red   = 0;
    bg_color.green = 0;
    bg_color.blue  = 0;
  }
  return(bg_color);
}


static void update_cur_color(const char *COLOR_NAME){
}


static void log_window(mu_Context *ctx) {
  if (mu_begin_window_ex(ctx, "Log", mu_rect(0, WINDOW_INFO_HEIGHT+CURRENT_STATE_HEIGHT, WINDOW_WIDTH, LOG_HEIGHT),LOG_OPTIONS)) {
    /* output text panel */
    mu_layout_row(ctx, 1, (int[]) { -1 }, -25);
    mu_begin_panel(ctx, "Log Output");
    mu_Container *panel = mu_get_current_container(ctx);
    mu_layout_row(ctx, 1, (int[]) { -1 }, -1);
    mu_text(ctx, logbuf);
    mu_end_panel(ctx);
    if (logbuf_updated) {
      panel->scroll.y = panel->content_size.y;
      logbuf_updated  = 0;
    }

    /* input textbox + submit button */
    static char buf[128];
    int         submitted = 0;
    mu_layout_row(ctx, 2, (int[]) { -70, -1 }, 0);
    if (mu_textbox(ctx, buf, sizeof(buf)) & MU_RES_SUBMIT) {
      mu_set_focus(ctx, ctx->last_id);
      submitted = 1;
    }
    if (mu_button(ctx, "Submit")) {
      submitted = 1;
    }
    if (submitted) {
      write_log(buf);
      buf[0] = '\0';
    }

    mu_end_window(ctx);
  }
}


static int uint8_slider(mu_Context *ctx, unsigned char *value, int low, int high) {
  static float tmp;

  mu_push_id(ctx, &value, sizeof(value));
  tmp = *value;
  int res = mu_slider_ex(ctx, &tmp, low, high, 0, "%.0f", MU_OPT_ALIGNCENTER);

  *value = tmp;
  mu_pop_id(ctx);
  return(res);
}


static void style_window(mu_Context *ctx) {
  static struct { const char *label; int idx; } windows[] = {
    { "text:",        MU_COLOR_TEXT        },
    { "border:",      MU_COLOR_BORDER      },
    { "windowbg:",    MU_COLOR_WINDOWBG    },
    { "titlebg:",     MU_COLOR_TITLEBG     },
    { "titletext:",   MU_COLOR_TITLETEXT   },
    { "panelbg:",     MU_COLOR_PANELBG     },
    { "button:",      MU_COLOR_BUTTON      },
    { "buttonhover:", MU_COLOR_BUTTONHOVER },
    { "buttonfocus:", MU_COLOR_BUTTONFOCUS },
    { "base:",        MU_COLOR_BASE        },
    { "basehover:",   MU_COLOR_BASEHOVER   },
    { "basefocus:",   MU_COLOR_BASEFOCUS   },
    { "scrollbase:",  MU_COLOR_SCROLLBASE  },
    { "scrollthumb:", MU_COLOR_SCROLLTHUMB },
    { NULL }
  };

}


static void process_frame(mu_Context *ctx) {
  mu_begin(ctx);
  windows_window(ctx);
  //log_window(ctx);
  //test_window(ctx);
  mu_end(ctx);
}


static const char button_map[256] = {
  [SDL_BUTTON_LEFT & 0xff]   = MU_MOUSE_LEFT,
  [SDL_BUTTON_RIGHT & 0xff]  = MU_MOUSE_RIGHT,
  [SDL_BUTTON_MIDDLE & 0xff] = MU_MOUSE_MIDDLE,
};

static const char key_map[256] = {
  [SDLK_LSHIFT & 0xff]    = MU_KEY_SHIFT,
  [SDLK_RSHIFT & 0xff]    = MU_KEY_SHIFT,
  [SDLK_LCTRL & 0xff]     = MU_KEY_CTRL,
  [SDLK_RCTRL & 0xff]     = MU_KEY_CTRL,
  [SDLK_LALT & 0xff]      = MU_KEY_ALT,
  [SDLK_RALT & 0xff]      = MU_KEY_ALT,
  [SDLK_RETURN & 0xff]    = MU_KEY_RETURN,
  [SDLK_BACKSPACE & 0xff] = MU_KEY_BACKSPACE,
};


/*
static int text_width(mu_Font font, const char *text, int len) {
  if (len == -1) {
    len = strlen(text);
  }
  return(r_get_text_width(text, len));
}


static int text_height(mu_Font font) {
  return(r_get_text_height());
}
*/


int pid_post(int pid){
  if (RETAIN_INITIAL_FOCUS) {
    SDL_Log("setting focused process to pid %d", pid);
    bool ok = set_focused_pid(pid);
    return(ok);
  }
  printf("mui app is taking focus...\n");
  return(0);
}


int mui_windows(){
  windows_mutex = SDL_CreateMutex();
  int threadReturnValue = -1;
  int focused_pid       = pid_pre();

  SDL_Init(SDL_INIT_EVERYTHING);
TTF_Init();
 // SDL_Init(SDL_INIT_VIDEO);
  SDL_Window *window = r_init(CFG);
  SDL_Surface *surface = SDL_GetWindowSurface(window);
  SDL_Renderer *renderer = SDL_GetRenderer(window);
  SDL_SetWindowAlwaysOnTop(window,true);
  SDL_SetWindowResizable(window,true);
  const char *img = "/tmp/img.bmp";
 if(font == NULL){
   font = TTF_OpenFont("/tmp/font.ttf", 12);
   SDL_Log("font is null");
 }
//  DumpPixels(img,renderer);
  //IMG_INIT_PNG
  /*
  int initResult = IMG_Init();
  if (initResult != 0){
                       SDL_Log("Initialization should succeed (%s)",
                                 SDL_GetError());
         exit(1);
  }
  SDL_Surface *reference = IMG_Load(img);
  if (reference == NULL){
         SDL_Log("Loading reference should succeed (%s)",
                 SDL_GetError()
                 );
         exit(1);
  }
 SDL_Surface *image = SDL_LoadBMP("/tmp/img.bmp");

    SDL_BlitSurface(image, NULL, surface, NULL); // blit it to the screen
    SDL_FreeSurface(image);

    // this works just like SDL_Flip() in SDL 1.2
    SDL_UpdateWindowSurface(window);
  */
//  SDL_HideWindow(window);
//  SDL_SetWindowIcon(
  int w, h;
  mu_Context *ctx = malloc(sizeof(mu_Context));
  mu_init(ctx);
  ctx->text_width  = text_width;
  ctx->text_height = text_height;


  SDL_LockMutex(windows_mutex);
  {
    windows                    = get_windows();
    poll_windows_thread_active = true;
  }
  SDL_UnlockMutex(windows_mutex);
  poll_windows_thread = SDL_CreateThread(poll_windows_thread_function, "PollWindows", (void *)NULL);
  if (NULL == poll_windows_thread) {
    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "SDL_CreateThread failed: %s\n", SDL_GetError());
  } else {
    SDL_Log("Thread poll windows created\n");
  }

  /* main loop */
  bool quit = false;
  while (quit == false) {
    SDL_Event e;
    while (SDL_PollEvent(&e)) {
      if (quit == true) {
        break;
      }
 //     SDL_Log("event: %d",e.type);
      switch (e.type) {
      case SDL_QUIT: exit(EXIT_SUCCESS); break;
      case SDL_WINDOWEVENT_SHOWN: SDL_Log("SDL_WINDOWEVENT_SHOWN"); break;
      case SDL_WINDOWEVENT_LEAVE: SDL_Log("SDL_WINDOWEVENT_LEAVE"); break;
      case SDL_WINDOWEVENT_ENTER: SDL_Log("SDL_WINDOWEVENT_ENTER"); break;
      case SDL_MOUSEMOTION: mu_input_mousemove(ctx, e.motion.x, e.motion.y); break;
      case SDL_MOUSEWHEEL: mu_input_scroll(ctx, 0, e.wheel.y * -30); break;
      case SDL_TEXTINPUT: mu_input_text(ctx, e.text.text); break;

      case SDL_MOUSEBUTTONDOWN:
      case SDL_MOUSEBUTTONUP: {
        int b = button_map[e.button.button & 0xff];
        if (b && e.type == SDL_MOUSEBUTTONDOWN) {
          mu_input_mousedown(ctx, e.button.x, e.button.y, b);
        }
        if (b && e.type == SDL_MOUSEBUTTONUP) {
          mu_input_mouseup(ctx, e.button.x, e.button.y, b);
        }
        break;
      }

      case SDL_KEYDOWN:
        SDL_Log(stderr, "keydown:%d", e.key.keysym.sym);
        if (e.key.keysym.sym == SDLK_q) {
          SDL_Log("quitting");
          quit = true;
          break;
        }
        if (e.key.keysym.sym == SDLK_s) {
          SDL_Log("screenshot");
          //screenshot(renderer, "screenshot.bmp");
        }
      case SDL_KEYUP: {
        int c = key_map[e.key.keysym.sym & 0xff];
        if (c && e.type == SDL_KEYDOWN) {
          mu_input_keydown(ctx, c);
        }
        if (c && e.type == SDL_KEYUP) {
          mu_input_keyup(ctx, c);
        }
        break;
      }
      }
    }
    if (set_focus_qty < 1) {
      pid_post(focused_pid);
      set_focus_qty++;
    }

    /* process frame */
    process_frame(ctx);

    /* render */
    r_clear(mu_color(OUTER_BG[0], OUTER_BG[1], OUTER_BG[2], 255));
    mu_Command *cmd = NULL;
    while (mu_next_command(ctx, &cmd)) {
      switch (cmd->type) {
      case MU_COMMAND_TEXT: r_draw_text(cmd->text.str, cmd->text.pos, cmd->text.color); break;
      case MU_COMMAND_RECT: r_draw_rect(cmd->rect.rect, cmd->rect.color); break;
      case MU_COMMAND_ICON: r_draw_icon(cmd->icon.id, cmd->icon.rect, cmd->icon.color); break;
      case MU_COMMAND_CLIP: r_set_clip_rect(cmd->clip.rect); break;
      }
    }
    r_present();

  }
  SDL_LockMutex(windows_mutex);
  {
    poll_windows_thread_active = false;
  }
  SDL_UnlockMutex(windows_mutex);

  SDL_WaitThread(poll_windows_thread, &threadReturnValue);
  SDL_Log("Thread returned value: %d", threadReturnValue);
  SDL_DestroyMutex(windows_mutex);
  return(0);
} /* main */


int pid_pre(){
  int focused_pid = get_focused_pid();

  SDL_Log("found focused pid to be %d", focused_pid);
  DB = malloc(sizeof(ColorsDB));
  char *Path = malloc(strlen(COLOR_NAMES_DB_PATH));

  sprintf(Path, "%s", COLOR_NAMES_DB_PATH);
  DB->Path = strdup(Path);
  free(Path);

  return(focused_pid);
}


color_rgb_t get_color_name_rgb(const char *COLOR_NAME){
  color_rgb_t         color_rgb  = { 0, 0, 0 };
  return(color_rgb);
}


char * get_color_hex_name(const char *COLOR_HEX){
  return(NULL);
}


char * get_color_name_hex(const char *COLOR_NAME){
  return(NULL);
}


static void * get_color_name_row_property(const char *COLOR_NAME, const char *ROW_PROPERTY){
  return(NULL);
}


static char * get_color_name_row(const char *COLOR_NAME){
  return(NULL);
}


